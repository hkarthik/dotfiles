# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="bira"

# Comment this out to disable weekly auto-update checks
DISABLE_AUTO_UPDATE="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Example format: plugins=(rails git textmate ruby lighthouse)
plugins=(git gitfast heroku vi-mode)
export PATH=/usr/local/bin:${PATH/\/usr\/local\/bin:/}
export PATH=/usr/local/sbin:$PATH
export PATH=/usr/local/bin:$PATH
export PATH="/usr/local/heroku/bin:$PATH"
export PATH="/usr/local/exercism:$PATH"
export EDITOR='vim'
#export CC=/usr/bin/llvm-gcc-4.2

# use .localrc for SUPER SECRET CRAP that you don't
# want in your public, versioned repo.
 if [[ -a ~/.localrc ]]
 then
   source ~/.localrc
 fi

# Don't auto title (works for tmux)
DISABLE_AUTO_TITLE=true
source $ZSH/oh-my-zsh.sh

# Customize to your needs...
[[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm" # Load RVM function

[[ -s "$HOME/.nvm/nvm.sh" ]] && . "$HOME/.nvm/nvm.sh" # This loads NVM

# Tmuxinator
[[ -s $HOME/.tmuxinator/scripts/tmuxinator ]] && source $HOME/.tmuxinator/scripts/tmuxinator

# Fix ZSH git completion
zstyle ':completion:*:*:git:*' script /usr/local/etc/bash_completion.d/git-completion.bash

# Aliases
alias byword='open -a /Applications/Byword.app/Contents/MacOS/Byword'

# Functions
for function in ~/.zsh/functions/*; do
  source $function
done


# Needed for nginx/unicorn
function bbu() {
  if [[ -z $1 ]] ; then
    UNICORN_PORT=3000;
  else
    UNICORN_PORT=$1;
  fi
  bundle exec unicorn -E development -c /usr/local/etc/unicorn.rb -l 127.0.0.1:$UNICORN_PORT
}
alias rake="noglob rake"

local git_time_since_last_commit='$(git_time_since_commit)%{$reset_color%}'

export PROMPT="╭─${user_host} ${current_dir} ${rvm_ruby} ${git_branch}╰─%B$%b "


function define_vim_wrappers()
{
  vim_commands=(
    eview evim gview gvim gvimdiff gvimtutor rgview
    rgvim rview rvim vim vimdiff vimtutor xxd mvim
  )

  for cmd in ${vim_commands[@]}; do
    cmd_path=`/usr/bin/env which -a "${cmd}" 2>/dev/null | grep '^/'`
    if [ -x "${cmd_path}" ]; then
      eval "function ${cmd} () { (unset GEM_HOME; unset GEM_PATH; $cmd_path \$@) }"
    fi
  done
}
define_vim_wrappers

PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting

## Desk.com test reporters
alias desk_run_tests='REPORTER=spec,slowtest,faillist rake assistly:test:all'
alias desk_run_tests_50='REPORTER=spec,slowtest,faillist SLOW_TEST_NUMBER=50 rake assistly:test:all'
alias desk_run_email_tests='REPORTER=spec,slowtest,faillist rake assistly:test:email_units'
alias desk_run_billing_test='REPORTER=spec,slowtest,faillist rake assistly:test:billing_units'
alias desk_run_international_test='REPORTER=spec,slowtest,faillist rake assistly:test:international_units'

function desktest() {
  export REPORTER=progress,failtest,slowtest;
  RAILS_ENV=test bundle exec time rake ci:setup:db assistly:test:all
}

function desktest_verbose() {
  export REPORTER=spec,failtest;
  RAILS_ENV=test bundle exec time rake ci:setup:db assistly:test:all
}

function deskonetest() {
  export REPORTER=spec,failtest;
  RAILS_ENV=test bundle exec time rake ci:setup:db assistly:test:${2:-units} TEST=${1} ${3}
}

function desktests() {
  export REPORTER=spec,failtest;
  RAILS_ENV=test bundle exec time rake ci:setup:db assistly:test:multiple TESTS=${1}
}
